# Analog Devices ADSP-SC57x

#
# ADSP-SC57x devices support JTAG and SWD transports.
#
#transport select jtag
#transport select swd

source [find target/swj-dp.tcl]

set CPU_MAX_ADDRESS 0xFFFFFFFF
source [find bitsbytes.tcl]
source [find memory.tcl]
source [find mem_helper.tcl]
source [find mmr_helpers.tcl]
source [find target/adspsc5xx.tcl]

# memory map

set MAP_XML [find target/adspsc57x_memory_map.xml]
set MAP_FILE [open $MAP_XML]
set _MEMORY_MAP [read $MAP_FILE]
close $MAP_FILE

global MEMORY_MAP
# substitute SDRAM_SIZE and FLASH_SIZE
set MEMORY_MAP [subst $_MEMORY_MAP]

# UserKey

# Uncomment the following 4 lines and change 0x00000000 to key values
#set USERKEY0 0x00000000
#set USERKEY1 0x00000000
#set USERKEY2 0x00000000
#set USERKEY3 0x00000000

if { [info exists USERKEY0] } {
   set  _USERKEY0 $USERKEY0
} else {
   set  _USERKEY0 0x00000000
}

if { [info exists USERKEY1] } {
   set  _USERKEY1 $USERKEY1
} else {
   set  _USERKEY1 0x00000000
}

if { [info exists USERKEY2] } {
   set  _USERKEY2 $USERKEY2
} else {
   set  _USERKEY2 0x00000000
}

if { [info exists USERKEY3] } {
   set  _USERKEY3 $USERKEY3
} else {
   set  _USERKEY3 0x00000000
}

# target config

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME adspsc57x
}

# CoreSight Debug Access Port (DAP)
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   if { [using_jtag] } {
      set _DAP_TAPID 0x4ba00477
   } else {
      set _DAP_TAPID 0x3ba02477
   }
}

if { [using_swd] } {
   swj_newdap $_CHIPNAME dap -expected-id $_DAP_TAPID
} else {
   jtag newtap $_CHIPNAME dap -irlen 4 -expected-id $_DAP_TAPID -disable
   jtag configure $_CHIPNAME.dap -event tap-enable "adjc_enable_dap $_CHIPNAME.adjc"

   # ADI JTAG Controller
   if { [info exists ADJC_TAPID ] } {
      set _ADJC_TAPID $ADJC_TAPID
   } else {
      set _ADJC_TAPID 0x0280f0cb
   }

   jtag newtap $_CHIPNAME adjc -irlen 5 -expected-id $_ADJC_TAPID

   # Once the JRC is up, enable our TAPs
   jtag configure $_CHIPNAME.adjc -event setup "jtag tapenable $_CHIPNAME.dap"
}

# GDB target:  Cortex-A5, using DAP
set _TARGETNAME $_CHIPNAME.dap
target create $_TARGETNAME cortex_a -chain-position $_TARGETNAME -dbgbase 0x80020000

# system reset
proc adspsc57x_system_reset {} {

   # Read BMODE from RCU0_STAT
   set data [pmemread32 0x3108c004]
   set bootmode [expr {($data >> 8) & 0xf}]
   puts "Boot Mode $bootmode"

   # Clear SHARC-XI debug registers for both SHARC-XI cores
   # If EMUCTL.EMUENA bit is set, the SHARC-XI core cannot be reset
   reset_sharcxi_debug_regs 0x80001000
   reset_sharcxi_debug_regs 0x80005000
   
   puts "start system reset ..."

   # Clear REG_RCU0_MSG
   # *pREG_RCU0_MSG = 0x0
   mww phys 0x3108c06c 0

   # Deassert RSTOUT in REG_RCU0_STAT
   # *pREG_RCU0_CTL |= 0x4
   pmmw 0x3108c000 0x4 0

   # Clear REG_RCU0_STAT
   # *pREG_RCU0_STAT = 0x7000d
   mww phys 0x3108c004 0x7000d

   # Set HALT (bit 2)
   # *pREG_RCU0_BCODE = 0x4
   mww phys 0x3108c028 0x4

   # There are two methods to do system reset

   # Use RCU_CTL to do system reset
   # *pREG_RCU0_CTL |= 0x00000001;
   #pmmw 0x3108c000 0x1 0

   # Use CTI to do system reset
   # Unlock CTI3 (System CTI)
   # *pREG_CTI3_LAR = 0xC5ACCE55
   mww phys 0x3110dfb0 0xC5ACCE55

   # Enable CTI3 (System CTI)
   # *pREG_CTI3_CTICONTROL = 1
   mww phys 0x3110d000 0x1

   # Connect CTITRIGOUT[2] of CTI3 to channel 2
   # *pREG_CTI3_CTIOUTEN2 = 4
   mww phys 0x3110d0a8 0x4

   # Send a signal to channel 2
   # *pREG_CTI3_CTIAPPPULSE = 4
   mww phys 0x3110d01c 0x4

   puts "system reset asserted"

   # Wait till Core 0 is idle
   # while((*pREG_RCU0_MSG & BITM_RCU_MSG_C0IDLE) == 0);
   set data 0
   set retry 0
   while { [expr {$data & 0x100}] == 0 } {
      set data [pmemread32 0x3108c06c]
      set retry [expr {$retry + 1}]
      if { $retry > 10 } break;
   }
   if { $retry > 10 } {
      set msg [format 0x%08x $data]
      puts stderr "Error: BCODE.HALT failed (REG_RCU0_MSG $msg)"
   }

   # update target state
   poll

   # Halt the core
   halt

   # Clear C0IDLE from REG_RCU0_MSG
   # *pREG_RCU0_MSG_CLR = 0x100
   mww phys 0x3108c074 0x100

   # Now BOOT is done
   puts "system reset done"

   set data [pmemread32 0x3108c004]
   show_rcu_stat "REG_RCU0_STAT" $data

   # Show REG_RCU0_MSG
   set data [pmemread32 0x3108c06c]
   show_rcu_msg "REG_RCU0_MSG" $data

   # clear REG_RCU0_MSG
   mww phys 0x3108c06c 0
   # clear REG_RCU0_BCODE
   mww phys 0x3108c028 0
   # Disable CTI3 (System CTI)
   mww phys 0x3110d000 0
}

$_TARGETNAME configure -event reset-assert {
   adspsc57x_system_reset
}

$_TARGETNAME configure -event examine-end {
   global _CHIPNAME

   # read PADS STAT register and store the value in data
   set pads_stat 0x31004468
   set data [pmemread32 $pads_stat]
   if { "$_CHIPNAME" == "adspsc571" && [expr {$data & 1}] == 0 } {
      puts stderr "Error: ADSP-SC573 found instead of ADSP-SC571"
      shutdown error
   } elseif { "$_CHIPNAME" == "adspsc573" && [expr {$data & 1}] == 1 } {
      puts stderr "Error: ADSP-SC571 found instead of ADSP-SC573"
      shutdown error
   }
}
 
# default initialization
proc adspsc57x_init {} {
}

# Unless USE_CTI is set to 0, CTI is used to restart the Cortex-A5 core
# so system peripherals can be restarted at the same time

if { [info exists USE_CTI] } {
   set _USE_CTI $USE_CTI
} else {
   set _USE_CTI 1
}
if { $_USE_CTI != 0 } {
   echo "halt and restart using CTI"
   $_TARGETNAME configure -restart-cti-reg-addr 0x3110d01c -restart-cti-channel 1
}

$_TARGETNAME configure -event gdb-attach {
   # set all bits in TAPC0_DBGCTL to enable all kinds of debug
   mww phys 0x31131000 0xffff

   reset

   if { $_USE_CTI != 0 } {
      adspsc5xx_configure_cti
   }

   adspsc57x_init

   arm semihosting enable
}

reset_config trst_only

$_TARGETNAME configure -event reset-assert-post "cortex_a dbginit"

gdb_memory_map disable
