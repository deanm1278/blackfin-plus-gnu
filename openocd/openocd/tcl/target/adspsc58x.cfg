# Analog Devices ADSP-SC58x

#
# ADSP-SC58x devices support JTAG and SWD transports.
#
#transport select jtag
#transport select swd

source [find target/swj-dp.tcl]

set CPU_MAX_ADDRESS 0xFFFFFFFF
source [find bitsbytes.tcl]
source [find memory.tcl]
source [find mem_helper.tcl]
source [find target/adspsc5xx.tcl]

# memory map

set MAP_XML [find target/adspsc58x_memory_map.xml]
set MAP_FILE [open $MAP_XML]
set _MEMORY_MAP [read $MAP_FILE]
close $MAP_FILE

global MEMORY_MAP
# substitute SDRAM_SIZE and FLASH_SIZE
set MEMORY_MAP [subst $_MEMORY_MAP]

# Uncomment the following 4 lines and change 0x00000000 to
# userkey if the part is locked
#set USERKEY0 0x00000000
#set USERKEY1 0x00000000
#set USERKEY2 0x00000000
#set USERKEY3 0x00000000

if { [info exists USERKEY0] } {
   set  _USERKEY0 $USERKEY0
} else {
   set  _USERKEY0 0x00000000
}

if { [info exists USERKEY1] } {
   set  _USERKEY1 $USERKEY1
} else {
   set  _USERKEY1 0x00000000
}

if { [info exists USERKEY2] } {
   set  _USERKEY2 $USERKEY2
} else {
   set  _USERKEY2 0x00000000
}

if { [info exists USERKEY3] } {
   set  _USERKEY3 $USERKEY3
} else {
   set  _USERKEY3 0x00000000
}

# target config

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME adspsc58x
}

# CoreSight Debug Access Port (DAP)
if { [info exists DAP_TAPID ] } {
   set _DAP_TAPID $DAP_TAPID
} else {
   if { [using_jtag] } {
      set _DAP_TAPID 0x4ba00477
   } else {
      set _DAP_TAPID 0x3ba02477
   }
}

if { [using_swd] } {
   swj_newdap $_CHIPNAME dap -expected-id $_DAP_TAPID
} else {
   jtag newtap $_CHIPNAME dap -irlen 4 -expected-id $_DAP_TAPID -disable
   jtag configure $_CHIPNAME.dap -event tap-enable "adjc_enable_dap $_CHIPNAME.adjc"

   # ADI JTAG Controller
   if { [info exists ADJC_TAPID ] } {
      set _ADJC_TAPID $ADJC_TAPID
   } else {
      set _ADJC_TAPID 0x028080cb
   }

   if { [info exists ADJC_TAPID1 ] } {
      set _ADJC_TAPID1 $ADJC_TAPID1
   } else {
      set _ADJC_TAPID1 0x128080cb
   }

   if { [info exists ADJC_TAPID2 ] } {
      set _ADJC_TAPID2 $ADJC_TAPID2
   } else {
      set _ADJC_TAPID2 0x228080cb
   }

   jtag newtap $_CHIPNAME adjc -irlen 5 -expected-id $_ADJC_TAPID -expected-id $_ADJC_TAPID1 -expected-id $_ADJC_TAPID2

   # Once the JRC is up, enable our TAPs
   jtag configure $_CHIPNAME.adjc -event setup "jtag tapenable $_CHIPNAME.dap"
}

# GDB target:  Cortex-A5, using DAP
set _TARGETNAME $_CHIPNAME.dap
target create $_TARGETNAME cortex_a -chain-position $_TARGETNAME -dbgbase 0x80020000

cache_config l2x 0x10000000 8

$_TARGETNAME configure -event examine-end {
   global _CHIPNAME

   # read PADS STAT register and store the value in data
   set pads_stat 0x31004468
   set data [pmemread32 $pads_stat]
   if { "$_CHIPNAME" == "adspsc584" && [expr {$data & 1}] == 0 } {
      puts stderr "Error: ADSP-SC589 found instead of ADSP-SC584"
      shutdown error
   } elseif { "$_CHIPNAME" == "adspsc589" && [expr {$data & 1}] == 1 } {
      puts stderr "Error: ADSP-SC584 found instead of ADSP-SC589"
      shutdown error
   }
}
 
# default initialization
proc adspsc58x_init {} {
}

# Unless USE_CTI is set to 0, CTI is used to restart the Cortex-A5 core
# so system peripherals can be restarted at the same time

if { [info exists USE_CTI] } {
   set _USE_CTI $USE_CTI
} else {
   set _USE_CTI 1
}
if { $_USE_CTI != 0 } {
   echo "halt and restart using CTI"
   $_TARGETNAME configure -restart-cti-reg-addr 0x3110d01c -restart-cti-channel 1
}

$_TARGETNAME configure -event gdb-attach {
   # set all bits in TAPC0_DBGCTL to enable all kinds of debug
   mww phys 0x31131000 0xffff

   # we don't do a system reset for ADSP-SC58x. so in order to prevent
   # a previously running TIMER0 from affecting the current debug session,
   # we mask all TIMER0 data interrupts.
   #
   # if you want to debug the program already running on the processor,
   # comment out this line so the running program will not be disturbed.
   mwh phys 0x3100101c 0xff

   if { $_USE_CTI != 0 } {
      adspsc5xx_configure_cti
   }

   halt

   adspsc58x_init

   arm semihosting enable
}

reset_config trst_only

$_TARGETNAME configure -event reset-assert-post "cortex_a dbginit"

gdb_memory_map disable
